
[NoInterfaceObject]
interface publicKey {
  readonly attribute DOMString publicKey; // use with High-Level API
  readonly attribute DOMString id;
  Key getPublicKey(); // use with Low-level API?
  // The publicKey always implies a private key is bound to it behind the scenes
};

[NoInterfaceObject]
interface HighLevel {

  void getPublicKey(DOMString id?);
  [TreatNonCallableAsNull] attribute Function? onGetKeypair;
  void createKeyPair();
  [TreatNonCallableAsNull] attribute Function? onCreateKeypair;

  void encryptAndSign(ArrayBuffer clearData, DOMString publicKey);
  [TreatNonCallableAsNull] attribute Function? onEncryptComplete;
  [TreatNonCallableAsNull] attribute Function? onEncryptError;

  void verifyAndDecrypt(ArrayBuffer cipherData, DOMString publicKeyID);
  [TreatNonCallableAsNull] attribute Function? onDecryptComplete;
  [TreatNonCallableAsNull] attribute Function? onDecryptError;

  void sign(ArrayBuffer clearData, DOMString publicKeyID);
  [TreatNonCallableAsNull] attribute Function? onSignComplete;
  [TreatNonCallableAsNull] attribute Function? onSignError;

  void verify(ArrayBuffer signature, ArrayBuffer data, DOMString publicKey);
  [TreatNonCallableAsNull] attribute Function? onSignComplete;
  [TreatNonCallableAsNull] attribute Function? onSignError;

  void hash(ArrayBuffer data);
  [TreatNonCallableAsNull] attribute Function? onHashComplete;
  [TreatNonCallableAsNull] attribute Function? onHashError;
};
